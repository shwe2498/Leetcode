1192. Critical Connections in a Network
There are n servers numbered from 0 to n - 1 connected by undirected server-to-server connections forming a network where connections[i] = [ai, bi] represents a connection between servers ai and bi. Any server can reach other servers directly or indirectly through the network.

A critical connection is a connection that, if removed, will make some servers unable to reach some other server.

Return all critical connections in the network in any order.

 

Example 1:


Input: n = 4, connections = [[0,1],[1,2],[2,0],[1,3]]
Output: [[1,3]]
Explanation: [[3,1]] is also accepted.
Example 2:

Input: n = 2, connections = [[0,1]]
Output: [[0,1]]

class Solution {
public:
    set<int> visited;
    vector<int> disc;
    vector<int> low;
    int time;
    vector<vector<int> > ret;
    void dfs(int node, int par, vector<int> graph[]) {
        if (visited.count(node))
            return;
          visited.insert(node);
          disc[node] = low[node] = time;
          time++;
          for (int x : graph[node]) {
             if (x == par)
             continue;
             if (!visited.count(x)) {
                dfs(x, node, graph);
                low[node] = min(low[node], low[x]);
                if (disc[node] < low[x]) {
                   ret.push_back({ node, x });
                }
             } else{
                low[node] = min(low[node], disc[x]);
             }
          }
     }
     vector<vector<int>> criticalConnections(int n, vector<vector<int> >& connections) {
          disc.resize(n + 1);
          low.resize(n + 1);
          time = 0;
          vector<int> graph[n + 1];
          for (int i = 0; i < connections.size(); i++) {
             int u = connections[i][0];
             int w = connections[i][1];
             graph[u].push_back(w);
             graph[w].push_back(u);
          }
          dfs(0, -1, graph);
          return ret;
      }
};
