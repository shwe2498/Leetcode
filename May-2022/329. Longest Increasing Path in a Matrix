329. Longest Increasing Path in a Matrix
Given an m x n integers matrix, return the length of the longest increasing path in matrix.

From each cell, you can either move in four directions: left, right, up, or down. You may not move diagonally or move outside the boundary (i.e., wrap-around is not allowed).

 

Example 1:


Input: matrix = [[9,9,4],[6,6,8],[2,1,1]]
Output: 4
Explanation: The longest increasing path is [1, 2, 6, 9].
Example 2:


Input: matrix = [[3,4,5],[3,2,6],[2,2,1]]
Output: 4
Explanation: The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.
Example 3:

Input: matrix = [[1]]
Output: 1

class Solution {
    int m, n; 
    vector<vector<int>> dir = {{-1, 0}, {0, -1}, {0, 1}, {1, -0}};
    
    int countPaths(vector<vector<int>>& mat, int i, int j, int prev, vector<vector<int>>& dp){
        if(i >= m || j >= n || i < 0 || j < 0 || mat[i][j] <= prev) return 0;
        if(dp[i][j] != -1) return dp[i][j];
        
        int max_len = 0;
        for(auto d : dir){
            max_len = max(max_len, countPaths(mat, d[0] + i, d[1] + j, mat[i][j], dp));
        }
        return dp[i][j] = max_len + 1;
    }
public:
    int longestIncreasingPath(vector<vector<int>>& matrix) {
        int len = 0;
        m = matrix.size();
        n = matrix[0].size();
        vector<vector<int>> dp(m, vector<int>(n, -1));
        
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                len = max(len, countPaths(matrix, i, j, -1, dp));
            }
        }
        
        return len;
    }
};
