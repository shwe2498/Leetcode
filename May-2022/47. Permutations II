47. Permutations II
Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.

Example 1:
Input: nums = [1,1,2]
Output:
[[1,1,2],
 [1,2,1],
 [2,1,1]]

Example 2:
Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]

class Solution {
    vector<vector<int>> result;
    void backtrack(vector<int>& comb, int n, map<int, int>& counter){
        if(comb.size() == n){
            result.push_back(comb);
            return;
        }
        
        for(auto e : counter){
            auto num = e.first;
            auto count = e.second;
            
            if(count == 0)
                continue;
            
            comb.push_back(num);
            counter[num] = count - 1;
            
            backtrack(comb, n, counter);
            
            comb.pop_back();
            counter[num] = count;
        }
    }
public:
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        map<int, int> counter;
        for(auto n : nums){
            if(counter.find(n) == counter.end())
                counter[n] = 0;
            counter[n] += 1;
        }
        vector<int> comb;
        backtrack(comb, nums.size(), counter);
        return result;
    }
};
