743. Network Delay Time
You are given a network of n nodes, labeled from 1 to n. You are also given times, a list of travel times as directed edges times[i] = (ui, vi, wi), where ui is the source node, vi is the target node, and wi is the time it takes for a signal to travel from source to target.

We will send a signal from a given node k. Return the time it takes for all the n nodes to receive the signal. If it is impossible for all the n nodes to receive the signal, return -1.

Example 1:
Input: times = [[2,1,1],[2,3,1],[3,4,1]], n = 4, k = 2
Output: 2

Example 2:
Input: times = [[1,2,1]], n = 2, k = 1
Output: 1

Example 3:
Input: times = [[1,2,1]], n = 2, k = 2
Output: -1

class Solution {
    vector<pair<int, int>> adj[101];
    
    void dijkstra(vector<int>& signalReceivedAt, int source, int n){
        priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int, int>>> pq;
        pq.push({0, source});
        
        signalReceivedAt[source] = 0;
        
        while(!pq.empty()){
            int currNodeTime = pq.top().first;
            int currNode = pq.top().second;
            pq.pop();
            
            for(auto edge : adj[currNode]){
                if(signalReceivedAt[edge.second] > currNodeTime + edge.first){
                    signalReceivedAt[edge.second] = currNodeTime + edge.first;
                    pq.push({signalReceivedAt[edge.second], edge.second});
                }
            }
        }
    }
public:
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        for(auto time : times)
            adj[time[0]].push_back({time[2], time[1]});
        
        vector<int> signalReceivedAt(n + 1, INT_MAX);
        dijkstra(signalReceivedAt, k, n);
        
        int ans = INT_MIN;
        for(int i = 1; i <= n; i++)
            ans = max(ans, signalReceivedAt[i]);
        
        return ans == INT_MAX ? -1 : ans;
    }
};
