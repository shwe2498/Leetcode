890. Find and Replace Pattern
Given a list of strings words and a string pattern, return a list of words[i] that match pattern. You may return the answer in any order.

A word matches the pattern if there exists a permutation of letters p so that after replacing every letter x in the pattern with p(x), we get the desired word.

Recall that a permutation of letters is a bijection from letters to letters: every letter maps to another letter, and no two letters map to the same letter.

Example 1:
Input: words = ["abc","deq","mee","aqq","dkd","ccc"], pattern = "abb"
Output: ["mee","aqq"]
Explanation: "mee" matches the pattern because there is a permutation {a -> m, b -> e, ...}. 
"ccc" does not match the pattern because {a -> c, b -> c, ...} is not a permutation, since a and b map to the same letter.

Example 2:
Input: words = ["a","b","c"], pattern = "a"
Output: ["a","b","c"]

class Solution {
    bool match(string word, string pattern){
        unordered_map<char, char> M;
        for(int i = 0; i < word.size(); ++i){
            char w = word[i];
            char p = pattern[i];
            if(M.find(w) == M.end()) M[w] = p;
            if(M[w] != p) return false;
        }
        
        vector<bool> seen(26);
        for(auto m : M){
            if(seen[m.second - 'a']) return false;
            seen[m.second - 'a'] = true;
        }
        return true;
    }
    
public:
    vector<string> findAndReplacePattern(vector<string>& words, string pattern) {
        vector<string> result;
        for(auto word : words){
            if(match(word, pattern)){
                result.push_back(word);
            }
        }
        return result;
    }
};
