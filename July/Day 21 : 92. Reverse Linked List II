92. Reverse Linked List II
Given the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list.

Example 1:
Input: head = [1,2,3,4,5], left = 2, right = 4
Output: [1,4,3,2,5]

Example 2:
Input: head = [5], left = 1, right = 1
Output: [5]

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
    void reverse(ListNode* node){
        ListNode* prev = nullptr;
        ListNode* curr = node;
        ListNode* nxt = nullptr;
        
        while(curr){
            nxt = curr->next;
            curr->next = prev;
            prev = curr;
            curr = nxt;
        }
    }
public:
    ListNode* reverseBetween(ListNode* head, int left, int right) {
        if(!head || (left <= 0 && right <= 0)) return head;
        if(!head->next) return head;
        
        int count = 0;
        ListNode* first = nullptr;
        ListNode* last = nullptr;
        ListNode* to = nullptr;
        ListNode* from = nullptr;
        ListNode* trav = head;
        
        while(trav){
            count++;
            if(count < left)
                first = trav;
            if(count == left)
                from = trav;
            if(count == right){
                to = trav;
                last = to->next;
                to->next = nullptr;
                break;
            }
            trav = trav->next;
        }
        
        reverse(from);
        first ? first->next = to : head = to;
        from->next = last;
        return head;
    }
};
