105. Construct Binary Tree from Preorder and Inorder Traversal
Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.

Example 1:
Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]
Output: [3,9,20,null,null,15,7]

Example 2:
Input: preorder = [-1], inorder = [-1]
Output: [-1]

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    unordered_map<int, int> m;
    vector<int> pre;
    TreeNode* build(int s, int e, int& i){
        if(s > e) return nullptr;
        
        int pre_root = pre[i++];
        TreeNode* root = new TreeNode(pre_root);
        
        if(s == e) return root;
        int inorder_index = m[pre_root];
        
        root->left = build(s, inorder_index - 1, i);
        root->right = build(inorder_index + 1, e, i);
        
        return root;
    }
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        for(int i = 0; i < inorder.size(); ++i){
            m[inorder[i]] = i;
        }
        pre = preorder;
        int index = 0;
        return build(0, m.size() - 1, index);
    }
};
