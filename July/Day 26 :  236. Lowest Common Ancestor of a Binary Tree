236. Lowest Common Ancestor of a Binary Tree
Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”

Example 1:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
Output: 3
Explanation: The LCA of nodes 5 and 1 is 3.

Example 2:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
Output: 5
Explanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.

Example 3:
Input: root = [1,2], p = 1, q = 2
Output: 1
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 
RECURSIVE

class Solution {
    TreeNode* lca;
    bool LCA(TreeNode* root, TreeNode* p, TreeNode* q){
        if(!root) return false;
        
        int left = LCA(root->left, p, q) ? 1 : 0;
        int right = LCA(root->right, p, q) ? 1 : 0;
        int mid = (root == p || root == q) ? 1 : 0;
        if(mid + left + right >= 2) lca = root;
        
        return mid + left + right > 0;
    } 
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        LCA(root, p, q);
        return lca;
    }
};

OR ITERATIVE

class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        queue<TreeNode*> que;
        unordered_map<TreeNode*, TreeNode*> parent;
        parent[root] = nullptr;
        que.push(root);
        
        while(!que.empty() && (!parent[p] || !parent[q])){
            TreeNode* t = que.front();
            que.pop();
            if(t->left){
                parent[t->left] = t;
                que.push(t->left);
            }
            if(t->right){
                parent[t->right] = t;
                que.push(t->right);
            }
        }
        set<TreeNode*> ancestors;
        while(p){
            ancestors.insert(p);
            p = parent[p];
        }
        while(ancestors.find(q) == ancestors.end()){
            q = parent[q];
        }
        
        return q;
    }
};
