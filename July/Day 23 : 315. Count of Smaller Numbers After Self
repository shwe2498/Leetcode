315. Count of Smaller Numbers After Self
You are given an integer array nums and you have to return a new counts array. The counts array has the property where counts[i] is the number of smaller elements to the right of nums[i].

Example 1:
Input: nums = [5,2,6,1]
Output: [2,1,1,0]
Explanation:
To the right of 5 there are 2 smaller elements (2 and 1).
To the right of 2 there is only 1 smaller element (1).
To the right of 6 there is 1 smaller element (1).
To the right of 1 there is 0 smaller element.

Example 2:
Input: nums = [-1]
Output: [0]

Example 3:
Input: nums = [-1,-1]
Output: [0,0]

class Solution {
    void merge(int left, int mid, int right, vector<pair<int, int>>& valIndPair, vector<int>& counts){
        vector<pair<int, int>> temp(right - left + 1);
        int l = left;
        int m = mid + 1;
        int t = 0;
        
        while(l <= mid && m <= right){
            if(valIndPair[l].first <= valIndPair[m].first){
                temp[t++] = valIndPair[m++];
            }
            else {
                counts[valIndPair[l].second] += (right - m + 1);
                temp[t++] = valIndPair[l++];
            }
        }
        while(l <= mid){
            temp[t++] = valIndPair[l++];
        }
        while(m <= right){
            temp[t++] = valIndPair[m++];
        }
        for(int i = left; i <= right; ++i)
            valIndPair[i] = temp[i - left];
    }
    
    void mergeSort(int left, int right, vector<pair<int, int>>& valIndPair, vector<int>& counts){
        if(left >= right) return;
        int mid = left + (right - left) / 2;
        mergeSort(left, mid, valIndPair, counts);
        mergeSort(mid + 1, right, valIndPair, counts);
        merge(left, mid, right, valIndPair, counts);
    }
    
public:
    vector<int> countSmaller(vector<int>& nums) {
        int n = nums.size();
        vector<pair<int, int>> valIndPair;
        for(int i = 0; i < n; ++i){
            valIndPair.push_back({nums[i], i});
        }
        vector<int> counts(n, 0);
        mergeSort(0, n - 1, valIndPair, counts);
        return counts;
    }
};
