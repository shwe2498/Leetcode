307. Range Sum Query - Mutable
Given an integer array nums, handle multiple queries of the following types:

Update the value of an element in nums.
Calculate the sum of the elements of nums between indices left and right inclusive where left <= right.
Implement the NumArray class:

NumArray(int[] nums) Initializes the object with the integer array nums.
void update(int index, int val) Updates the value of nums[index] to be val.
int sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] + ... + nums[right]).
 
Example 1:
Input
["NumArray", "sumRange", "update", "sumRange"]
[[[1, 3, 5]], [0, 2], [1, 2], [0, 2]]
Output
[null, 9, null, 8]

Explanation
NumArray numArray = new NumArray([1, 3, 5]);
numArray.sumRange(0, 2); // return 1 + 3 + 5 = 9
numArray.update(1, 2);   // nums = [1, 2, 5]
numArray.sumRange(0, 2); // return 1 + 2 + 5 = 8

class NumArray {
    vector<int>m_nums;
    int sum;
public:
    NumArray(vector<int>& nums) {
        m_nums = nums;
        sum = 0;
        for(int i = 0; i < m_nums.size(); ++i){
            sum += m_nums[i];
        }
    }
    
    void update(int index, int val) {
        sum -= m_nums[index];
        m_nums[index] = val;
        sum += val;
    }
    
    int sumRange(int left, int right) {
        int res=sum; 
        for(int i = 0; i < left; i++){
            res -= m_nums[i];
        }
        for(int i = right + 1; i < m_nums.size(); i++){
            res -= m_nums[i];
        }
        return res;
    }
};

/**
 * Your NumArray object will be instantiated and called as such:
 * NumArray* obj = new NumArray(nums);
 * obj->update(index,val);
 * int param_2 = obj->sumRange(left,right);
 */
