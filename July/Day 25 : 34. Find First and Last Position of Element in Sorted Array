34. Find First and Last Position of Element in Sorted Array
Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

Example 1:
Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]

Example 2:
Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]

Example 3:
Input: nums = [], target = 0
Output: [-1,-1]

class Solution {
    int lower_bound(vector<int>& nums, int target){
        int index = -1;
        int start = 0;
        int end = nums.size() - 1;
        
        while(start <= end){
            int mid = (start + end) / 2;
            if(nums[mid] == target){
                index = mid;
                end = mid - 1;
            }
            else if(nums[mid] < target){
                start = mid + 1;
            }
            else{
                end = mid - 1;
            }
        }
        return index;
    }
    
    int upper_bound(vector<int>& nums, int target){
        int index = -1;
        int start = 0;
        int end = nums.size() - 1;
        while(start <= end){
            int mid = (start + end) / 2;
            if(nums[mid] == target){
                index = mid;
                start = mid + 1;
            }
            else if(nums[mid] < target){
                start = mid + 1;
            }
            else{
                end = mid - 1;
            }
        }
        return index;
    }
    
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        if(nums.size() == 0) return {-1, -1};
        
        return {lower_bound(nums, target), upper_bound(nums, target)};
    }
};
