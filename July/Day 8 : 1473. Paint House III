1473. Paint House III
There is a row of m houses in a small city, each house must be painted with one of the n colors (labeled from 1 to n), some houses that have been painted last summer should not be painted again.

A neighborhood is a maximal group of continuous houses that are painted with the same color.

For example: houses = [1,2,2,3,3,2,1,1] contains 5 neighborhoods [{1}, {2,2}, {3,3}, {2}, {1,1}].
Given an array houses, an m x n matrix cost and an integer target where:

houses[i]: is the color of the house i, and 0 if the house is not painted yet.
cost[i][j]: is the cost of paint the house i with the color j + 1.
Return the minimum cost of painting all the remaining houses in such a way that there are exactly target neighborhoods. If it is not possible, return -1.

 

Example 1:

Input: houses = [0,0,0,0,0], cost = [[1,10],[10,1],[10,1],[1,10],[5,1]], m = 5, n = 2, target = 3
Output: 9
Explanation: Paint houses of this way [1,2,2,1,1]
This array contains target = 3 neighborhoods, [{1}, {2,2}, {1,1}].
Cost of paint all houses (1 + 1 + 1 + 1 + 5) = 9.
Example 2:

Input: houses = [0,2,1,2,0], cost = [[1,10],[10,1],[10,1],[1,10],[5,1]], m = 5, n = 2, target = 3
Output: 11
Explanation: Some houses are already painted, Paint the houses of this way [2,2,1,2,2]
This array contains target = 3 neighborhoods, [{2,2}, {1}, {2,2}]. 
Cost of paint the first and last house (10 + 1) = 11.
Example 3:

Input: houses = [3,1,2,3], cost = [[1,1,1],[1,1,1],[1,1,1],[1,1,1]], m = 4, n = 3, target = 3
Output: -1
Explanation: Houses are already painted with a total of 4 neighborhoods [{3},{1},{2},{3}] different of target = 3.

class Solution {
public:
    const int MAX_COST = 1000001;
    
    int minCost(vector<int>& houses, vector<vector<int>>& cost, int m, int n, int target) {
        vector<vector<int>> dp(target + 1, vector<int>(n, MAX_COST));
        
        for(int c = 1; c <= n; ++c){
            if(houses[0] == c){
                dp[1][c - 1] = 0;
            }
            else if(!houses[0]){
                dp[1][c - 1] = cost[0][c - 1];
            }
        }
        
        for(int h = 1; h < m; ++h){
            vector<vector<int>> dp1(target + 1, vector<int>(n, MAX_COST));
            for(int i = 1; i <= min(target, h + 1); ++i){
                for(int c = 1; c <= n; ++c){
                    if(houses[h] && c != houses[h]){
                        continue;
                    }
                    
                    int currCost = MAX_COST;
                    
                    for(int j = 1; j <= n; ++j){
                        if(j != c){
                            currCost = min(currCost, dp[i - 1][j - 1]);
                        }
                        else{
                            currCost = min(currCost, dp[i][c - 1]);
                        }
                    }
                    
                    int costToPaint = houses[h] ? 0 : cost[h][c - 1];
                    dp1[i][c - 1] = currCost + costToPaint;
                }
            }
            
            dp = dp1;
        }
        int minCost = MAX_COST;
        
        for(int c = 1; c <= n; ++c){
            minCost = min(minCost, dp[target][c - 1]);
        }
        
        return minCost == MAX_COST ? -1 : minCost;
    }
};
