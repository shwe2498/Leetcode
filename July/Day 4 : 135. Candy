135. Candy

There are n children standing in a line. Each child is assigned a rating value given in the integer array ratings.

You are giving candies to these children subjected to the following requirements:

Each child must have at least one candy.
Children with a higher rating get more candies than their neighbors.
Return the minimum number of candies you need to have to distribute the candies to the children.

 

Example 1:

Input: ratings = [1,0,2]
Output: 5
Explanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively.
Example 2:

Input: ratings = [1,2,2]
Output: 4
Explanation: You can allocate to the first, second and third child with 1, 2, 1 candies respectively.
The third child gets 1 candy because it satisfies the above two conditions.

class Solution {
    int count(int n){
        return (n * (n + 1)) / 2;
    }
public:
    int candy(vector<int>& ratings) {
        if(ratings.size() <= 1) return ratings.size();
        
        int candies = 0;
        int up = 0;
        int down = 0;
        int oldSlope = 0;
        
        for(int i = 1; i < ratings.size(); ++i){
            int newSlope = (ratings[i] > ratings[i - 1]) ? 1 
                : (ratings[i] < ratings[i - 1] ? -1 : 0);
            
            if((oldSlope > 0 && newSlope == 0) || (oldSlope < 0 && newSlope >= 0)){
                candies += count(up) + count(down) + max(up, down);
                up = 0;
                down = 0;
            }
            if(newSlope > 0)
                up++;
            else if(newSlope < 0)
                down++;
            else
                candies++;
            
            oldSlope = newSlope;
        }
        candies += count(up) + count(down) + max(up, down) + 1;
        return candies;
    }
};
