968. Binary Tree Cameras
You are given the root of a binary tree. We install cameras on the tree nodes where each camera at a node can monitor its parent, itself, and its immediate children.

Return the minimum number of cameras needed to monitor all nodes of the tree.

Example 1:
Input: root = [0,0,null,0,0]
Output: 1
Explanation: One camera is enough to monitor all nodes if placed as shown.

Example 2:
Input: root = [0,0,null,0,null,0,null,null,0]
Output: 2
Explanation: At least two cameras are needed to monitor all nodes of the tree. The above image shows one of the valid configurations of camera placement.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    void dfs(TreeNode* node, TreeNode* parent, int& ans, set<TreeNode*>& s){
        if(node){
            dfs(node->left, node, ans, s);
            dfs(node->right, node, ans, s);
            
            if(!parent && 
               s.find(node) == s.end() || 
               s.find(node->left) == s.end() || 
               s.find(node->right) == s.end()){
                ans++;
                s.insert(node);
                s.insert(parent);
                s.insert(node->left);
                s.insert(node->right);
            }
        }
    }
public:
    int minCameraCover(TreeNode* root) {
        int ans = 0;
        set<TreeNode*> s;
        s.insert(nullptr);
        
        dfs(root, nullptr, ans, s);
        
        return ans;
    }
};
