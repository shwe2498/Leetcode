456. 132 Pattern
Given an array of n integers nums, a 132 pattern is a subsequence of three integers nums[i], nums[j] and nums[k] such that i < j < k and nums[i] < nums[k] < nums[j].

Return true if there is a 132 pattern in nums, otherwise, return false.

Example 1:
Input: nums = [1,2,3,4]
Output: false
Explanation: There is no 132 pattern in the sequence.

Example 2:
Input: nums = [3,1,4,2]
Output: true
Explanation: There is a 132 pattern in the sequence: [1, 4, 2].

Example 3:
Input: nums = [-1,3,2,0]
Output: true
Explanation: There are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0].

class Solution {
public:
    bool find132pattern(vector<int>& nums) {
        if(nums.size() < 3) return false;
        
        vector<int> min_nums(nums.size(), 0);
        min_nums[0] = nums[0];
        
        for(int i = 1; i < nums.size(); i++){
            min_nums[i] = min(min_nums[i - 1], nums[i]);
        }
        
        int k = nums.size();
        for(int j = nums.size() - 1; j > 0; j--){
            if(nums[j] <= min_nums[j]) continue;
            
            auto it = lower_bound(nums.begin() + k, nums.end(), min_nums[j] + 1);
            k= it - nums.begin();
            if(k < nums.size() && nums[k] < nums[j]) return true;
            nums[--k] = nums[j];
        }
        return false;
    }
};
