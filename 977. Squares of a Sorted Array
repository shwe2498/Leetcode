/* Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.

Example 1:
Input: nums = [-4,-1,0,3,10]
Output: [0,1,9,16,100]
Explanation: After squaring, the array becomes [16,1,0,9,100].
After sorting, it becomes [0,1,9,16,100].

Example 2:
Input: nums = [-7,-3,2,3,11]
Output: [4,9,9,49,121] */

vector<int> sortedSquares(vector<int>& nums) {
        vector<int> res(nums.size());
        //Approach 1 Brute Force: TC : O(n) SC : O(n)
        multiset<int> S;
        for(auto n : nums){
            S.insert(n * n);
        }
        int index = 0;
        for(auto s : S){
            res[index++] = s;
        }
        return res;
    }
    
vector<int> sortedSquares(vector<int>& nums) {
        vector<int> res(nums.size());
        //Approach 2 Two pointers: TC : O(n) SC : O(1) 
        /*int l = 0, r = nums.size() - 1;
        for (int k = nums.size() - 1; k >= 0; k--) {
            if (abs(nums[r]) > abs(nums[l])) res[k] = nums[r] * nums[r--];
            else res[k] = nums[l] * nums[l++];
        }*/
        return res;
    }    
