363. Max Sum of Rectangle No Larger Than K
Given an m x n matrix matrix and an integer k, return the max sum of a rectangle in the matrix such that its sum is no larger than k.

It is guaranteed that there will be a rectangle with a sum no larger than k.

Example 1:
Input: matrix = [[1,0,1],[0,-2,3]], k = 2
Output: 2
Explanation: Because the sum of the blue rectangle [[0, 1], [-2, 3]] is 2, and 2 is the max number no larger than k (k = 2).

Example 2:
Input: matrix = [[2,2,-1]], k = 3
Output: 3

class Solution {
    int result = INT_MIN;
    int getMaxKadane(vector<int>& nums){
        int maxKadane = INT_MIN;
        int currentMaxSum = 0;
        
        for(int& num : nums){
            currentMaxSum = max(currentMaxSum + num, num);
            maxKadane = max(maxKadane, currentMaxSum);
        }
        return maxKadane;
    }
    
    void updateResult(vector<int>& nums, int k){
        int kadaneSum = getMaxKadane(nums);
        if(kadaneSum <= k){
            result = max(result, kadaneSum);
            return;
        }
        
        int sum = 0;
        set<int> sortedSum;
        set<int>::iterator it;
        
        sortedSum.insert(0);
        for(int& num : nums){
            sum += num;
            it = sortedSum.lower_bound(sum - k);
            if(it != sortedSum.end())
                result = max(result, sum - *it);
            
            sortedSum.insert(sum);
        }
    }
    
public:
    int maxSumSubmatrix(vector<vector<int>>& matrix, int k) {
        if(matrix[0].size() > matrix.size()){
            vector<int> rowSum(matrix[0].size());
            for(int i = 0; i < matrix.size(); i++){
                fill(rowSum.begin(), rowSum.end(), 0);
                
                for(int row = i; row < matrix.size(); row++){
                    for(int col = 0; col < matrix[0].size(); col++){
                        rowSum[col] += matrix[row][col];
                    }
                    updateResult(rowSum, k);
                    if(result == k)
                        return result;
                }
            }
        }
        else{
            vector<int> colSum(matrix.size());
            for(int i = 0; i < matrix[0].size(); i++){
                fill(colSum.begin(), colSum.end(), 0);
                for(int col = i; col < matrix[0].size(); col++){
                    for(int row = 0; row < matrix.size(); row++){
                        colSum[row] += matrix[row][col];
                    }
                    updateResult(colSum, k);
                    if(result == k)
                        return result;
                }
            }
        }
        return result;
    }
};
