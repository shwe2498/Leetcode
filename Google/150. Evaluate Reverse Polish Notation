150. Evaluate Reverse Polish Notation
Evaluate the value of an arithmetic expression in Reverse Polish Notation.
Valid operators are +, -, *, and /. Each operand may be an integer or another expression.
Note that division between two integers should truncate toward zero.
It is guaranteed that the given RPN expression is always valid. That means the expression would always evaluate to a result, and there will not be any division by zero operation.

Example 1: Input: tokens = ["2","1","+","3","*"]
Output: 9
Explanation: ((2 + 1) * 3) = 9

Example 2: Input: tokens = ["4","13","5","/","+"]
Output: 6
Explanation: (4 + (13 / 5)) = 6

Example 3: Input: tokens = ["10","6","9","3","+","-11","*","/","*","17","+","5","+"]
Output: 22
Explanation: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5
= ((10 * (6 / (12 * -11))) + 17) + 5
= ((10 * (6 / -132)) + 17) + 5
= ((10 * 0) + 17) + 5
= (0 + 17) + 5
= 17 + 5
= 22

class Solution {
public:
    int calculate(int op1, int op2, string opr){
        if(opr == "+"){
            //add
            return op1 + op2;        
        }
        else if(opr == "-"){
            //substract
            return op1 - op2;
        }
        else if(opr == "*"){
            //multiply
            return op1 * op2;
        }
        else if(opr == "/"){
            //divide
            return op1 / op2;
        }
        return 0;
    }
    
    int evalRPN(vector<string>& tokens) {
        if(tokens.size() == 0) return 0;
        if(tokens.size() == 1) return stoi(tokens[0]);
        
        stack<int> st;
        for(auto token : tokens){
            if(token == "+" || token == "-" || token == "*" || token == "/"){
                int op2 = st.top();
                st.pop();
                int op1 = st.top();
                st.pop();
                st.push(calculate(op1, op2, token));
            }
            else{
                st.push(stoi(token));
            }
        }
        return st.top();
    }
};
