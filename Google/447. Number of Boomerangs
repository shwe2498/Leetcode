447. Number of Boomerangs
You are given n points in the plane that are all distinct, where points[i] = [xi, yi]. A boomerang is a tuple of points (i, j, k) such that the distance between i and j equals the distance between i and k (the order of the tuple matters).

Return the number of boomerangs.

Example 1:
Input: points = [[0,0],[1,0],[2,0]]
Output: 2
Explanation: The two boomerangs are [[1,0],[0,0],[2,0]] and [[1,0],[2,0],[0,0]].

Example 2:
Input: points = [[1,1],[2,2],[3,3]]
Output: 2

Example 3:
Input: points = [[1,1]]
Output: 0

class Solution {
public:
    int numberOfBoomerangs(vector<vector<int>>& points) {
        int n = points.size();
        if(n == 1) return 0;
        
        int ans = 0;
        unordered_map<int, int> boomerangs;
        
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                if(i == j) continue;
                int x = (points[i][0] - points[j][0]) * (points[i][0] - points[j][0]);
                int y = (points[i][1] - points[j][1]) * (points[i][1] - points[j][1]);
                
                boomerangs[x + y]++;
            }
            
            for(auto b : boomerangs){
                int t = b.second;
                ans +=  t * (t - 1);
            }
            
            boomerangs.clear();
        }
        
        return ans;
    }
};
