939. Minimum Area Rectangle
You are given an array of points in the X-Y plane points where points[i] = [xi, yi].

Return the minimum area of a rectangle formed from these points, with sides parallel to the X and Y axes. If there is not any such rectangle, return 0.

Example 1:
Input: points = [[1,1],[1,3],[3,1],[3,3],[2,2]]
Output: 4

Example 2:
Input: points = [[1,1],[1,3],[3,1],[3,3],[4,1],[4,3]]
Output: 2

class Solution {
public:
    int minAreaRect(vector<vector<int>>& points) {
        int n = points.size();
        set<pair<int,int>> S;
        for(int i = 0; i < n; i++){
            S.insert({points[i][0], points[i][1]});
        }
        
        int min_area = INT_MAX;
        for(int i = 0; i < n; i++){
            for(int j = i + 1; j < n; j++){
                pair<int, int> p1 = {points[i][0], points[i][1]};
                pair<int, int> p2 = {points[j][0], points[j][1]};
                
                pair<int, int> p3 = {p1.first, p2.second};
                pair<int, int> p4 = {p2.first, p1.second};
                
                if(S.find(p3) != S.end() && S.find(p4) != S.end()){
                    int area = abs(p1.first - p2.first) * abs(p1.second - p2.second);
                    if(area != 0)
                        min_area = min(min_area, area);
                }
            }
        }
        return min_area == INT_MAX ? 0 : min_area;
    }
};
