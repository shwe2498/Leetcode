528. Random Pick with Weight
You are given an array of integers stones where stones[i] is the weight of the ith stone.

We are playing a game with the stones. On each turn, we choose the heaviest two stones and smash them together. Suppose the heaviest two stones have weights x and y with x <= y. The result of this smash is:

If x == y, both stones are destroyed, and
If x != y, the stone of weight x is destroyed, and the stone of weight y has new weight y - x.
At the end of the game, there is at most one stone left.

Return the smallest possible weight of the left stone. If there are no stones left, return 0.

Example 1: Input: stones = [2,7,4,1,8,1]
Output: 1
Explanation: 
We combine 7 and 8 to get 1 so the array converts to [2,4,1,1,1] then,
we combine 2 and 4 to get 2 so the array converts to [2,1,1,1] then,
we combine 2 and 1 to get 1 so the array converts to [1,1,1] then,
we combine 1 and 1 to get 0 so the array converts to [1] then that's the value of the last stone.

Example 2: Input: stones = [1]
Output: 1

class Solution {
private:
    vector<int> ps;    
public:
    Solution(vector<int>& w) {
        for(auto n : w){
            ps.push_back(n + (ps.empty() ? 0 : ps.back()));
        }
    }
    
    int pickIndex() {
        float rn = (float) rand() / RAND_MAX;
        float t = rn * ps.back();
        
        int low = 0;
        int high = ps.size();
        while(low < high){
            int mid = low + (high - low) / 2;
            if(t > ps[mid])
                low = mid + 1;
            else
                high = mid;
        }
        return low;
    }
};

/**
 * Your Solution object will be instantiated and called as such:
 * Solution* obj = new Solution(w);
 * int param_1 = obj->pickIndex();
 */
