1260. Shift 2D Grid
Given a 2D grid of size m x n and an integer k. You need to shift the grid k times.

In one shift operation:

Element at grid[i][j] moves to grid[i][j + 1].
Element at grid[i][n - 1] moves to grid[i + 1][0].
Element at grid[m - 1][n - 1] moves to grid[0][0].
Return the 2D grid after applying shift operation k times.

Example 1:
Input: grid = [[1,2,3],[4,5,6],[7,8,9]], k = 1
Output: [[9,1,2],[3,4,5],[6,7,8]]

Example 2:
Input: grid = [[3,8,1,9],[19,7,2,5],[4,6,11,10],[12,0,21,13]], k = 4
Output: [[12,0,21,13],[3,8,1,9],[19,7,2,5],[4,6,11,10]]

Example 3:
Input: grid = [[1,2,3],[4,5,6],[7,8,9]], k = 9
Output: [[1,2,3],[4,5,6],[7,8,9]]

class Solution {
public:
    vector<vector<int>> shiftGrid(vector<vector<int>>& grid, int k) {
        int noOfRows = grid.size();
        int noOfCols = grid[0].size();
        
        vector<vector<int>> out(noOfRows, vector<int>(noOfCols, 0));
        for(int row = 0; row < noOfRows; row++){
            for(int col = 0; col < noOfCols; col++){
                int newCol = (col + k) % noOfCols;
                int count = (col + k) / noOfCols;
                int newRow = (row + count) % noOfRows;
                
                out[newRow][newCol] = grid[row][col];
            }
        }
        return out;
    }
};
