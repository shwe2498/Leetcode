188. Best Time to Buy and Sell Stock IV
You are given an integer array prices where prices[i] is the price of a given stock on the ith day, and an integer k.

Find the maximum profit you can achieve. You may complete at most k transactions.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

Example 1:
Input: k = 2, prices = [2,4,1]
Output: 2
Explanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.

Example 2:
Input: k = 2, prices = [3,2,6,5,0,3]
Output: 7
Explanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.

class Solution {
public:
    int maxProfit(int k, vector<int>& prices) {
        int n = prices.size();
        int res = 0;
        
        if(n <= 0 || k <= 0) return 0;
        
        if(2 * k > n){
            for(int i = 1; i < n; i++){
                res += max(0, prices[i] - prices[i - 1]);
            }
            return res;
        }
        
        vector<vector<vector<int>>> dp(n, vector<vector<int>>(k + 1, vector<int>(2)));
        for(int i = 0; i < n; i++){
            for(int j = 0; j <= k; j++){
                dp[i][j][0] = -1000000000;
                dp[i][j][1] = -1000000000;
            }
        }
        
        dp[0][0][0] = 0;
        dp[0][1][1] = -prices[0];
        
        for(int i = 1; i < n; i++){
            for(int j = 0; j <= k; j++){
                dp[i][j][0] = max(dp[i - 1][j][0], dp[i - 1][j][1] + prices[i]);
                if(j > 0){
                    dp[i][j][1] = max(dp[i - 1][j][1], dp[i - 1][j - 1][0] - prices[i]);
                }
            }
        }
        
        for(int j = 0; j <= k; j++){
            res = max(res, dp[n - 1][j][0]);
        }
        
        return res;
    }
};
