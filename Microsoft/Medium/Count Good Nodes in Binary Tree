/*
1448. Count Good Nodes in Binary Tree
Given a binary tree root, a node X in the tree is named good if in the path from root to X there are no nodes with a value greater than X.

Return the number of good nodes in the binary tree.
Input: root = [3,1,4,3,null,1,5]
Output: 4
Explanation: Nodes in blue are good.
Root Node (3) is always a good node.
Node 4 -> (3,4) is the maximum value in the path starting from the root.
Node 5 -> (3,4,5) is the maximum value in the path
Node 3 -> (3,1,3) is the maximum value in the path.
*/

//Definition for a binary tree node.
struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode() : val(0), left(nullptr), right(nullptr) {}
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
    TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
};

class Solution {
public:
    int goodNodescount = 0;
    
    int goodNodes(TreeNode* root) {
        //DFS recursive
        dfs(root, INT_MIN); 
        
        //DFS iterative
        stack<pair<TreeNode*, int>> s;
        s.push({root, INT_MIN});
        
        while(s.size()){
            pair<TreeNode*, int> p = s.top();
            if(p.second <= p.first->val){
                goodNodescount++;
            }
            s.pop();
            
            if(p.first->left){
                s.push({p.first->left, max(p.first->val, p.second)});
            }
            
            if(p.first->right){
                s.push({p.first->right, max(p.first->val, p.second)});
            }
        }
        
        //BFS
        queue<pair<TreeNode*, int>> q;
        q.push({root, INT_MIN});
        
        while(!q.empty()){
            auto p = q.front();
            if(p.second <= p.first->val){
                goodNodescount++;
            }
            q.pop();
            
            if(p.first->right){
                q.push({p.first->right, max(p.first->val, p.second)});
            }
            
            if(p.first->left){
                q.push({p.first->left, max(p.first->val, p.second)});
            }
        }
        
        return goodNodescount;
    }
    
    void dfs(TreeNode* node, int maxVal){
        if(maxVal <= node->val){
            goodNodescount++;
        }
        
        if(node->right){
            dfs(node->right, max(node->val, maxVal));
        }
        
        if(node->left){
            dfs(node->left, max(node->val, maxVal));
        }
    }
};
