145. Binary Tree Postorder Traversal
Given the root of a binary tree, return the postorder traversal of its nodes' values.
Example 1:
Input: root = [1,null,2,3]
Output: [3,2,1]

Example 2:
Input: root = []
Output: []

Example 3:
Input: root = [1]
Output: [1]

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    vector<int> result;
public:
    vector<int> postorderTraversal(TreeNode* root) {
        //Recursive
        /*if(root){
            postorderTraversal(root->left);
            postorderTraversal(root->right);
            result.push_back(root->val);
        }*/
        //Iterative
        /*if(!root) return {};
        stack<TreeNode*> s;
        s.push(root);
        while(s.size()){
            TreeNode* t = s.top();
            result.push_back(t->val);
            s.pop();
            
            if(t->left)
                s.push(t->left);
            if(t->right)
                s.push(t->right);
        }
        reverse(result.begin(), result.end());*/
        //Morris
        if(!root) return {};
        TreeNode* curr = root;
        while(curr){
            if(!curr->right){
                result.push_back(curr->val);
                curr = curr->left;
            }
            else{
                TreeNode* temp = curr->right;
                while(temp->left && temp->left != curr){
                    temp = temp->left;
                }
                if(!temp->left){
                    result.push_back(curr->val);
                    temp->left = curr;
                    curr = curr->right;
                }
                else{
                    temp->left = nullptr;
                    curr = curr->left;
                }
            }
        }
        reverse(result.begin(), result.end());
        return result;
    }
};
