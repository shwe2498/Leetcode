102. Binary Tree Level Order Traversal
Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).
Example 1:
Input: root = [3,9,20,null,null,15,7]
Output: [[3],[9,20],[15,7]]

Example 2:
Input: root = [1]
Output: [[1]]

Example 3:
Input: root = []
Output: []

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> out;
    void preorder(TreeNode* root, int level){
        if(!root) return;
        if(level == out.size()) out.push_back(vector<int>());
        out[level].push_back(root->val);
        preorder(root->left, level + 1);
        preorder(root->right, level + 1);
    }
    
    vector<vector<int>> levelOrder(TreeNode* root) {
        if(!root) return out;
        //preorder(root, 0);
        
        queue<TreeNode*> q;
        q.push(root);
        
        while(!q.empty()){
            int l = q.size();
            vector<int> v;
            for(int i = 0; i < l; i++){
                auto n = q.front();
                q.pop();
                
                v.push_back(n->val);

                if(n->left) q.push(n->left);
                if(n->right) q.push(n->right);
            }
            out.push_back(v);
        }
        
        return out;
    }
};
