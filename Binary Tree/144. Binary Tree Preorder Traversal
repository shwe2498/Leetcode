144. Binary Tree Preorder Traversal
Given the root of a binary tree, return the preorder traversal of its nodes' values.
Example 1:
Input: root = [1,null,2,3]
Output: [1,2,3]

Example 2:
Input: root = []
Output: []

Example 3:
Input: root = [1]
Output: [1]

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> res;
    //Recursive
    vector<int> preorderTraversal(TreeNode* root) {
        if(root){
            res.push_back(root->val);
            preorderTraversal(root->left);
            preorderTraversal(root->right);
        }
        return res;
    }
    
    //Iterative
    vector<int> preorderTraversal(TreeNode* root) {
        if (!root) return res;
        stack<TreeNode*> s;
        TreeNode *currNode;
        
        s.push(root);
        
        while(s.size()) {
            currNode = s.top();
            s.pop();
            
            res.push_back(currNode->val);
            if (currNode->right) s.push(currNode->right);
            if (currNode->left) s.push(currNode->left);
        }
    
        return res;
    }
    
    //Morris Traversal
    vector<int> preorderTraversal(TreeNode* root) {
        TreeNode* curr = root;
        while(curr){
            if(!curr->left){
                res.push_back(curr->val);
                curr = curr->right;
            }
            else{
                TreeNode* temp = curr->left;
                while(temp->right && temp->right != curr){
                    temp = temp->right;
                }
                if(!temp->right){
                    res.push_back(curr->val);
                    temp->right = curr;
                    curr = curr->left;
                }
                else{
                    temp->right = nullptr;
                    curr = curr->right;
                }
            }
        }
        return res;
    }
};
